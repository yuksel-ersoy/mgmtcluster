---
- name: Check for existing manifest
  theforeman.foreman.resource_info:
    username: "{{ satellite.admin_username }}"
    password: "{{ satellite.admin_password }}"
    server_url: "{{ satellite.server_url }}"
    validate_certs: no
    resource: subscriptions
    organization: "{{ satellite.organization }}"
  delegate_to: localhost
  register: manifest
  tags:
    - manifest
    - activation-keys

- block:
  # This is ugly but need to figure out how to address this for Tower use case. manifest_path does not take remote url
  - name: Obtain manifest
    get_url:
      dest: "{{ satellite.manifest.temp_dir.strip('/') }}/{{ satellite.manifest.filename }}"
      url: "{{ satellite.manifest.remote_prefix.strip('/') }}/{{ satellite.manifest.filename }}"

  - name: Import manifest
    theforeman.foreman.subscription_manifest:
      username: "{{ satellite.admin_username }}"
      password: "{{ satellite.admin_password }}"
      server_url: "{{ satellite.server_url }}"
      validate_certs: no
      organization: "{{ satellite.organization }}"
      manifest_path: "{{ satellite.manifest.temp_dir.strip('/') }}/{{ satellite.manifest.filename }}"
      state: "{{ satellite.manifest.state }}"
  delegate_to: localhost
  when: ( manifest.resources | length ) == 0
  tags:
    - manifest
#
#############################
## Refresh manifest
#############################
#- name: Refresh manifest
#  theforeman.foreman.subscription_manifest:
#    username: "{{ satellite.admin_username }}"
#    password: "{{ satellite.admin_password }}"
#    server_url: "{{ satellite.server_url }}"
#    validate_certs: no
#    organization: "{{ satellite.organization }}"
#    state: refreshed
#  delegate_to: localhost
#  tags:
#    - manifest

#########################
# Create  products
#########################

- name: Create product for EPEL
  theforeman.foreman.product:
    username: "{{ satellite.admin_username }}"
    password: "{{ satellite.admin_password }}"
    server_url: "{{ satellite.server_url }}"
    validate_certs: no
    organization: "{{ satellite.organization }}"
    name: "EPEL8"
    state: present
  delegate_to: localhost
  tags:
    - products
    - epel
  when:
    - satellite.enable_epel is defined
    - satellite.enable_epel|bool == True

- name: "Create EPEL GPG key"
  theforeman.foreman.content_credential:
    username: "{{ satellite.admin_username }}"
    password: "{{ satellite.admin_password }}"
    server_url: "{{ satellite.server_url }}"
    organization: "{{ satellite.organization }}"
    validate_certs: no
    name: "EPEL8"
    content_type: gpg_key
    content: "{{ lookup('url', 'http://download.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-8') }}"
  delegate_to: localhost
  tags:
    - epel
  when:
    - satellite.enable_epel is defined
    - satellite.enable_epel|bool == True

    #########################
    # Create repository sets
    #########################

- name: Enable repository sets with releasevers and basearch
  theforeman.foreman.repository_set:
    username: "{{ satellite.admin_username }}"
    password: "{{ satellite.admin_password }}"
    server_url: "{{ satellite.server_url }}"
    validate_certs: no
    organization: "{{ satellite.organization }}"
    label: "{{ item.label }}"
    all_repositories: no
    repositories:
    - releasever: "{{ item.releasever }}"
      basearch: "{{ item.basearch }}"
  loop: "{{ satellite.repository_sets }}"
  when: '"basearch" in item'
  delegate_to: localhost
  tags:
    - repository-sets

- name: Enable repository sets with releasevers
  theforeman.foreman.repository_set:
    username: "{{ satellite.admin_username }}"
    password: "{{ satellite.admin_password }}"
    server_url: "{{ satellite.server_url }}"
    validate_certs: no
    organization: "{{ satellite.organization }}"
    label: "{{ item.label }}"
    all_repositories: no
    repositories:
    - releasever: "{{ item.releasever }}"
  loop: "{{ satellite.repository_sets }}"
  when: '"releasever" in item and "basearch" not in item'
  delegate_to: localhost
  tags:
    - repository-sets

- name: Enable repository sets without releasevers
  theforeman.foreman.repository_set:
    username: "{{ satellite.admin_username }}"
    password: "{{ satellite.admin_password }}"
    server_url: "{{ satellite.server_url }}"
    validate_certs: no
    organization: "{{ satellite.organization }}"
    label: "{{ item.label }}"
    all_repositories: yes
  loop: "{{ satellite.repository_sets }}"
  when: '"releasever" not in item'
  delegate_to: localhost
  tags:
    - repository-sets

- name: Enable EPEL
  theforeman.foreman.repository:
    username: "{{ satellite.admin_username }}"
    password: "{{ satellite.admin_password }}"
    server_url: "{{ satellite.server_url }}"
    validate_certs: no
    organization: "{{ satellite.organization }}"
    product: EPEL8
    name: EPEL8
    content_type: yum
    url: https://dl.fedoraproject.org/pub/epel/8/Everything/x86_64
    gpg_key: EPEL8
  when:
    - satellite.enable_epel is defined
    - satellite.enable_epel|bool == True
  delegate_to: localhost
  tags:
    - repository-sets
    - epel

#########################
# Create sync plan and assign the created repository sets above to it
#########################

- name: Get all products
  theforeman.foreman.resource_info:
    username: "{{ satellite.admin_username }}"
    password: "{{ satellite.admin_password }}"
    server_url: "{{ satellite.server_url }}"
    validate_certs: no
    resource: products
    organization: "{{ satellite.organization }}"
  register: products
  delegate_to: localhost
  tags:
    - sync-plan

- name: Add products with repositories enabled to sync-list
  set_fact:
    sync_list: "{{ sync_list|default([]) + [ item.name ] }}"
  loop: "{{ products.resources }}"
  when: item.repository_count > 0
  delegate_to: localhost
  tags:
    - sync-plan

# todo: still not idempotent, fix and uncomment notify
- name: Create or update nightly sync plan for all products containing a repository
  theforeman.foreman.sync_plan:
    username: "{{ satellite.admin_username }}"
    password: "{{ satellite.admin_password }}"
    server_url: "{{ satellite.server_url }}"
    validate_certs: no
    organization: "{{ satellite.organization }}"
    name: Nightly
    description: Nightly
    interval: daily
    enabled: true
    # intentionally set this to the first day of 2020 to keep the module
    # from registering a change on every run
    sync_date: "01/01/2020 05:00:00 UTC"
    products: "{{ sync_list }}"
    state: present
  delegate_to: localhost
  tags:
    - sync-plan

- name: Force all notified handlers at this point, to publish sync repos if necessary
  meta: flush_handlers
  tags:
    - sync-plan


#########################
# Create lifecycle environments
#########################

- name: Add lifecycle environment
  theforeman.foreman.lifecycle_environment:
    username: "{{ satellite.admin_username }}"
    password: "{{ satellite.admin_password }}"
    server_url: "{{ satellite.server_url }}"
    validate_certs: no
    organization: "{{ satellite.organization }}"
    name: "{{ item.name }}"
    label: "{{ item.name }}"
    prior: "{{ item.prior }}"
    description: "{{ item.description }}"
    state: "present"
  loop: "{{ satellite.lifecycle_environments }}"
  delegate_to: localhost
  tags:
    - lifecycle-environments
  when: "'lifecycle_environments' in satellite"


#########################
# Create all content views and add their repositories
#########################

- name: Create any new content views and add repos
  theforeman.foreman.content_view:
    username: "{{ satellite.admin_username }}"
    password: "{{ satellite.admin_password }}"
    server_url: "{{ satellite.server_url }}"
    validate_certs: no
    organization: "{{ satellite.organization }}"
    name: "{{ item.name }}"
  loop: "{{ satellite.content_views }}"
  delegate_to: localhost
  tags:
   - content-views
  register: create_content_views

- name: pull info from registries
  theforeman.foreman.resource_info:
    username: "{{ satellite.admin_username }}"
    password: "{{ satellite.admin_password }}"
    server_url: "{{ satellite.server_url }}"
    validate_certs: no
    resource: repositories
    organization: "{{ satellite.organization }}"
  delegate_to: localhost
  tags:
    - content-views
  register: registries

- name: Add repos to existing content views
  theforeman.foreman.content_view:
    username: "{{ satellite.admin_username }}"
    password: "{{ satellite.admin_password }}"
    server_url: "{{ satellite.server_url }}"
    validate_certs: no
    organization: "{{ satellite.organization }}"
    name: "{{ item.name }}"
    repositories: "{{ item.repositories.yum }}"
  loop: "{{ satellite.content_views }}"
  delegate_to: localhost
  tags:
   - content-views
  register: update_content_views

- name: Publish new content view - all Lifecycle envs
  theforeman.foreman.content_view_version:
    username: "{{ satellite.admin_username }}"
    password: "{{ satellite.admin_password }}"
    server_url: "{{ satellite.server_url }}"
    validate_certs: no
    organization: "{{ satellite.organization }}"
    content_view: "{{ item.item.name }}"
    lifecycle_environments: "{{ satellite.lifecycle_environments | map(attribute='name') | list }}"
  delegate_to: localhost
  loop: "{{ create_content_views.results }}"
  when: item.changed

- name: Update existing content view - only to Library
  theforeman.foreman.content_view_version:
    username: "{{ satellite.admin_username }}"
    password: "{{ satellite.admin_password }}"
    server_url: "{{ satellite.server_url }}"
    validate_certs: no
    organization: "{{ satellite.organization }}"
    content_view: "{{ item.item.name }}"
    lifecycle_environments: "Library"
  delegate_to: localhost
  loop: "{{ update_content_views.results }}"
  loop_control:
    index_var: index
  when:
    - item.changed
    - not create_content_views.results[index].changed

#
# Fix the pool IDs in inventory
#
- name: Create client activation key
  block:
    - name: Copy satellite vars file
      ansible.builtin.copy:
        src: "{{ mgmt.vars_path }}/satellite.yml"
        dest: /tmp/dummy.yml
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"
        mode: "0755"

    - name: Update pool ID for OpenStack 16.2
      ansible.builtin.lineinfile:
        path: /tmp/dummy.yml
        state: present
        regexp: 'osp16_pool_id:'
        line: '        - pool_id: {{ item.cp_id }}'
      when: '"OpenStack" in item.name'
      loop: "{{ manifest.resources }}"

    - name: Update pool ID for OpenStack 17.1
      ansible.builtin.lineinfile:
        path: /tmp/dummy.yml
        state: present
        regexp: 'osp17_pool_id:'
        line: '        - pool_id: {{ item.cp_id }}'
      when: '"OpenStack" in item.name'
      loop: "{{ manifest.resources }}"

    - name: Update pool ID for IDM
      ansible.builtin.lineinfile:
        path: /tmp/dummy.yml
        state: present
        regexp: 'idm_pool_id:'
        line: '        - pool_id: {{ item.cp_id }}'
      when: '"Linux" in item.name'
      loop: "{{ manifest.resources }}"

    - name: Update pool ID for RHEL-8
      ansible.builtin.lineinfile:
        path: /tmp/dummy.yml
        state: present
        regexp: 'rhel_pool_id:'
        line: '        - pool_id: {{ item.cp_id }}'
      when: '"Linux" in item.name'
      loop: "{{ manifest.resources }}"

    - name: load the updated data structure
      ansible.builtin.include_vars:
        file: /tmp/dummy.yml
        name: dummy

    - name: Set activation keys variable
      set_fact:
        act_keys: "{{ dummy.satellite.activation_keys }}"

    - name: Debug
      debug:
        var: act_keys
  delegate_to: localhost
  tags:
  - activation-keys

#########################
# Create activation keys
#########################
- name: Create client activation key
  block:
    - theforeman.foreman.activation_key:
        username: "{{ satellite.admin_username }}"
        password: "{{ satellite.admin_password }}"
        server_url: "{{ satellite.server_url }}"
        validate_certs: no
        organization: "{{ satellite.organization }}"
        name: "{{ item.name }}"
        lifecycle_environment: "{{ item.lifecycle_environment }}"
        content_view: "{{ item.content_view }}"
        subscriptions: "{{ item.subscriptions }}"
        content_overrides: "{{ item.content_overrides }}"
        auto_attach: False
        release_version: "{{ item.releasever }}"
      delegate_to: localhost
      tags:
        - activation-keys
      loop: "{{ act_keys }}"
      when: "'activation_keys' in satellite"
  delegate_to: localhost
  rescue:
    - name: report error
      set_fact:
        pool_error_msg: |
            There was a failure while creating activation keys.
            This is often related to incorrect Pool IDs.
            Please review the output below and update the Pool Ids in
            the Inventory in the Activation Keys section to use these values.
            Then re-run this playbook with --tags activation-keys
      delegate_to: localhost
      tags:
        - activation-keys

    - name: get pool IDs
      set_fact:
        pool_ids: "{{ pool_ids| default([])  + [ item.name + ' -> ' + item.cp_id ] }}"
      delegate_to: localhost
      loop: "{{ manifest.resources }}"
      tags:
        - activation-keys

    - fail:
        msg:
          - "{{ pool_error_msg }}"
          - "{{ pool_ids }}"
      tags:
        - activation-keys

- name: Publish new content view - all Lifecycle envs
  theforeman.foreman.content_view_version:
    username: "{{ satellite.admin_username }}"
    password: "{{ satellite.admin_password }}"
    server_url: "{{ satellite.server_url }}"
    validate_certs: no
    organization: "{{ satellite.organization }}"
    content_view: "{{ item.item.name }}"
    lifecycle_environments: "{{ satellite.lifecycle_environments | map(attribute='name') | list }}"
  delegate_to: localhost
  loop: "{{ create_content_views.results }}"
  when: item.changed

- name: Update existing content view - only to Library
  theforeman.foreman.content_view_version:
    username: "{{ satellite.admin_username }}"
    password: "{{ satellite.admin_password }}"
    server_url: "{{ satellite.server_url }}"
    validate_certs: no
    organization: "{{ satellite.organization }}"
    content_view: "{{ item.item.name }}"
    lifecycle_environments: "Library"
  delegate_to: localhost
  loop: "{{ update_content_views.results }}"
  loop_control:
    index_var: index
  when:
    - item.changed
    - not create_content_views.results[index].changed
      
# TODO: this is very slow and loops through to sync repos product by product
# This doesn't leverage all available cores for pulp sync tasks
# It would be quicker start all syncs individually, or maybe put these in the
# background with async.
- name: If we added products to the nightly sync task we should sync them now
  theforeman.foreman.repository_sync:
    username: "{{ satellite.admin_username }}"
    password: "{{ satellite.admin_password }}"
    server_url: "{{ satellite.server_url }}"
    validate_certs: no
    organization: "{{ satellite.organization }}"
    product: "{{ item }}"
  loop: "{{ sync_list }}"
  delegate_to: localhost
  register: sync_status
  until: sync_status.changed == true
  retries: 10
